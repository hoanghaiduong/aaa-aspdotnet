// <auto-generated />
using System;
using aaa_aspdotnet.src.DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231107103151_NullableForRefreshToken")]
    partial class NullableForRefreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B8E59BF282");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.DailyDivision", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("DeviceID");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<int>("TechnicalId")
                        .HasColumnType("int")
                        .HasColumnName("TechnicalID");

                    b.Property<string>("AfterImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BeforeImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("CheckedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("EstimateFinishTime")
                        .HasColumnType("time");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SpecificContents")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((4))");

                    b.Property<double?>("TotalTime")
                        .HasColumnType("float");

                    b.Property<DateTime?>("WorkDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DeviceId", "PlanId", "TechnicalId")
                        .HasName("pk_DailyDivision");

                    b.HasIndex("PlanId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TechnicalId");

                    b.ToTable("DailyDivision", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.DetailPlan", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("DeviceID");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Percents")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Specification")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((4))");

                    b.Property<string>("TypePlan")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('PM')");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DeviceId", "PlanId")
                        .HasName("pk_DetailPlan");

                    b.HasIndex("PlanId");

                    b.HasIndex("StatusId");

                    b.ToTable("DetailPlan", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeviceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FacId")
                        .HasColumnType("int")
                        .HasColumnName("FacID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Qrcode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("QRCode");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("DeviceId")
                        .HasName("PK__Devices__49E1233103C7F49A");

                    b.HasIndex("FacId");

                    b.HasIndex("TypeId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DAL.Entities.DeviceType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("DAL.Entities.Factory", b =>
                {
                    b.Property<int>("FacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FacID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("FacName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("FacId")
                        .HasName("PK__Factory__815081C831BD8E9C");

                    b.HasIndex("CustomerId");

                    b.ToTable("Factory", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Contents")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("PlanId")
                        .HasName("PK__Plans__755C22D76733A685");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsActived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DAL.Entities.Technical", b =>
                {
                    b.Property<int>("TechnicalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TechnicalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicalId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TechnicalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Zalo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TechnicalId")
                        .HasName("PK__Technica__F6E0649FE62EF743");

                    b.ToTable("Technical", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Entities.WorkStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK__WorkStat__C8EE20433B62230C");

                    b.ToTable("WorkStatus", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.DailyDivision", b =>
                {
                    b.HasOne("DAL.Entities.Device", "Device")
                        .WithMany("DailyDivisions")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("fk_DailyDivision_Device");

                    b.HasOne("DAL.Entities.Plan", "Plan")
                        .WithMany("DailyDivisions")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("fk_DailyDivision_Plan");

                    b.HasOne("DAL.Entities.WorkStatus", "Status")
                        .WithMany("DailyDivisions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("fk_DailyDivision_WorkStatus");

                    b.HasOne("DAL.Entities.Technical", "Technical")
                        .WithMany("DailyDivisions")
                        .HasForeignKey("TechnicalId")
                        .IsRequired()
                        .HasConstraintName("fk_DailyDivision_Technical");

                    b.Navigation("Device");

                    b.Navigation("Plan");

                    b.Navigation("Status");

                    b.Navigation("Technical");
                });

            modelBuilder.Entity("DAL.Entities.DetailPlan", b =>
                {
                    b.HasOne("DAL.Entities.Device", "Device")
                        .WithMany("DetailPlans")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("fk_DetailPlan_Device");

                    b.HasOne("DAL.Entities.Plan", "Plan")
                        .WithMany("DetailPlans")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("fk_DetailPlan_Plan");

                    b.HasOne("DAL.Entities.WorkStatus", "Status")
                        .WithMany("DetailPlans")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("fk_DetailPlan_WorkStatus");

                    b.Navigation("Device");

                    b.Navigation("Plan");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DAL.Entities.Device", b =>
                {
                    b.HasOne("DAL.Entities.Factory", "Fac")
                        .WithMany("Devices")
                        .HasForeignKey("FacId")
                        .IsRequired()
                        .HasConstraintName("fk_Device_Factory");

                    b.HasOne("DAL.Entities.DeviceType", "Type")
                        .WithMany("Devices")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Devices_DeviceTypes");

                    b.Navigation("Fac");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DAL.Entities.Factory", b =>
                {
                    b.HasOne("DAL.Entities.Customer", "Customer")
                        .WithMany("Factories")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_Customer_Factory");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.Customer", b =>
                {
                    b.Navigation("Factories");
                });

            modelBuilder.Entity("DAL.Entities.Device", b =>
                {
                    b.Navigation("DailyDivisions");

                    b.Navigation("DetailPlans");
                });

            modelBuilder.Entity("DAL.Entities.DeviceType", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("DAL.Entities.Factory", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("DAL.Entities.Plan", b =>
                {
                    b.Navigation("DailyDivisions");

                    b.Navigation("DetailPlans");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Technical", b =>
                {
                    b.Navigation("DailyDivisions");
                });

            modelBuilder.Entity("DAL.Entities.WorkStatus", b =>
                {
                    b.Navigation("DailyDivisions");

                    b.Navigation("DetailPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
